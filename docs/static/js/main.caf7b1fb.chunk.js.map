{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","image","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","useFetchGifs","imagen","key","GifExpertApp","props","categories","ReactDOM","render","document","getElementById"],"mappings":"6MAmCeA,EAhCK,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAEDC,mBAAS,IAFR,mBAE9BC,EAF8B,KAElBC,EAFkB,KAgBrC,OACI,0BAAMC,SATW,SAACC,GAClBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,OAMd,2BACIO,KAAM,OACNC,MAAOT,EACPU,SAjBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,Y,uBCRlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDACoCC,UAAUH,GAD9C,+DAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAGEA,EAAKC,OAHP,uBAGZC,EAHY,EAGZA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAAU,IAAD,EAC3B,MAAO,CACHC,GAAID,EAAMC,GACVC,MAAOF,EAAME,MACbV,IAAG,UAAEQ,EAAMG,cAAR,aAAE,EAAcC,iBAAiBZ,QATzB,kBAYZM,GAZY,4CAAH,sDCkBLO,EAVK,SAAC,GAAsB,IAArBH,EAAoB,EAApBA,MAAOV,EAAa,EAAbA,IAAa,EAARS,GAE9B,OACI,yBAAKK,UAAW,0CACZ,yBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,2BAAIA,KC2EDO,EAnFC,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAAc,ECFJ,SAACA,GAAc,IAAD,EACZd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAHyB,mBAC/BC,EAD+B,KACxBC,EADwB,KAmBtC,OAZAC,qBAAU,WACNxB,EAAQC,GACHwB,MAAK,SAACX,GAEHS,EAAS,CACLf,KAAMM,EACNO,SAAS,SAItB,CAACpB,IAEGqB,EDcyBI,CAAazB,GAAhCa,EA/Be,EA+BrBN,KAAca,EA/BO,EA+BPA,QAErB,OACI,oCACI,wBAAIJ,UAAW,qCAAsChB,GACpDoB,GAAY,uBAAGJ,UAAW,oCAAd,WAEb,yBAAKA,UAAW,aACZ,+BACCH,EAAOJ,KAAI,SAACiB,GAAD,OACR,kBAAC,EAAD,eACIC,IAAKD,EAAOf,IAORe,UEhBbE,EAlCM,SAACC,GAAU,MAEQ3C,mBAAS,CAAC,kBAFlB,mBAErB4C,EAFqB,KAET7C,EAFS,KAa5B,OACI,oCACI,4CACA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,6BACA,4BAKQ6C,EAAWrB,KAAI,SAAAT,GAAQ,OACnB,kBAAC,EAAD,CACI2B,IAAK3B,EACLA,SAAUA,UCzBtC+B,IAASC,OACL,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.caf7b1fb.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst AddCategory = ({setCategories}) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = (e) => {\r\n        setInputValue(e.target.value);\r\n    };\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if (inputValue.trim().length > 2) {\r\n            setCategories(cats => [inputValue, ...cats]);\r\n            setInputValue('');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input\r\n                type={\"text\"}\r\n                value={inputValue}\r\n                onChange={handleInputChange}\r\n            />\r\n        </form>\r\n    )\r\n\r\n};\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n};\r\n\r\nexport default AddCategory;\r\n","export const getGifs = async (category) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category)}&limit=10&api_key=eibe9TcRzIOozwKSxIVFBBmsktD9h4nj`;\r\n    const resp = await fetch(url);\r\n    const {data} = await resp.json();\r\n\r\n    const gifs = data.map(image => {\r\n        return {\r\n            id: image.id,\r\n            title: image.title,\r\n            url: image.images?.downsized_medium.url\r\n        }\r\n    });\r\n    return gifs;\r\n};\r\n","import React from 'react';\r\n\r\n// si en el componente padre paso el objeto de imagen\r\n// tengo que desesctructurarlo haciendo referencia a\r\n// image: {campos}\r\n// const GifGridItem = ({image:{title, url, id}}) => {\r\n// si en el padre paso la desestructuración así: {..image}\r\n// sólo tendría que desesctructurar de esta forma: {campos}\r\nconst GifGridItem = ({title, url, id}) => {\r\n\r\n    return (\r\n        <div className={\"card animate__animated animate__fadeIn\"}>\r\n            <img src={url} alt={title}/>\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default GifGridItem;\r\n","import React/*, {useEffect, useState}*/ from 'react';\r\nimport {useFetchGifs} from \"../hooks/useFetchGifs\";\r\nimport GifGridItem from \"./GifGridItem\";\r\n// import {getGifs} from \"../helpers/getGifs\";\r\n\r\nconst GifGrid = ({category}) => {\r\n\r\n\r\n    // ********************* NOTA: LO COMENTADO CORRESPONDE AL USO NORMAL DE HOOKS *****************************\r\n    // ********************* SE COMENTÓ PARA IMPLEMENTAR EL CUSTOM HOOK Y LO DEJÉ COMO REFERENCIA **************\r\n\r\n    // // use effect con dependencias []\r\n    // // permite llamar el método getGifs únicamente cuando el componente\r\n    // // es renderizado por primera vez\r\n    // useEffect(() => {\r\n    //\r\n    //     // getGifs retorna una promesa, por ende podemos resolverla aquí\r\n    //     // La sentencia anterior toma un parámetro y lo pasa a la función\r\n    //     // como no hace más nada lo podemos resumir así:\r\n    //     getGifs( category )\r\n    //         .then( setImages );\r\n    //     // Esto sería equivalente a la siguiente expresión\r\n    //     // .then( images => setImages( images ) )\r\n    //     // donde el primer argumento images se envía a la función y por defecto\r\n    //     // quedando de forma simple: .then( setImages )\r\n    //\r\n    //     // si dejamos las dependencias así: []\r\n    //     // nos dará un warning ya que la cateogoría pudiese cambiar y no lo estamos\r\n    //     // considerando, por ende ponemos category como dependencia y listo\r\n    // }, [category]);\r\n    //\r\n    // const [images, setImages] = useState([]);\r\n\r\n    //implementación con custom hooks\r\n    // al igual que la desestructuración de un campo anidado, también\r\n    // podemos cambiar el nombre de un campo en la desestructuración\r\n    const {data: images, loading} = useFetchGifs(category);\r\n\r\n    return (\r\n        <>\r\n            <h3 className={\"animate__animated animate__fadeIn\"}>{category}</h3>\r\n            {loading  && <p className={\"animate__animated animate__flash\"}>Loading</p>}\r\n\r\n            <div className={\"card-grid\"}>\r\n                <span></span>\r\n                {images.map((imagen) => (\r\n                    <GifGridItem\r\n                        key={imagen.id}\r\n                        // si lo envío de la siguiente manera:\r\n                        // image={imagen}\r\n                        // en el componente hijo lo debo desestructurar\r\n                        // así : {image: {title, url, id} }\r\n                        // puedo mandarlo también de la siguiente manera\r\n                        // que ya está desestructurado\r\n                        {...imagen}\r\n                        // y en el componente hijo sólo necesitaria obtenerlo\r\n                        // de esta forma: {url, id, title}\r\n\r\n                    />\r\n                ))\r\n                }\r\n            </div>\r\n\r\n\r\n            {/* Implementación antigua sin custom hook*/}\r\n\r\n            {/*<div className={\"card-grid\"}>*/}\r\n            {/*    {images.map((imagen) => (*/}\r\n            {/*        <GifGridItem*/}\r\n            {/*            key={imagen.id}*/}\r\n            {/*            // si lo envío de la siguiente manera:*/}\r\n            {/*            // image={imagen}*/}\r\n            {/*            // en el componente hijo lo debo desestructurar*/}\r\n            {/*            // así : {image: {title, url, id} }*/}\r\n            {/*            // puedo mandarlo también de la siguiente manera*/}\r\n            {/*            // que ya está desestructurado*/}\r\n            {/*            {...imagen}*/}\r\n            {/*            // y en el componente hijo sólo necesitaria obtenerlo*/}\r\n            {/*            // de esta forma: {url, id, title}*/}\r\n\r\n            {/*        />*/}\r\n            {/*    ))*/}\r\n            {/*    }*/}\r\n            {/*</div>*/}\r\n        </>\r\n    )\r\n};\r\n\r\nexport default GifGrid;\r\n","import {useEffect, useState} from \"react\";\r\nimport {getGifs} from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = (category) => {\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    // los efectos no pueden ser async\r\n    useEffect(() => {\r\n        getGifs(category)\r\n            .then((images) => {\r\n\r\n                setState({\r\n                    data: images,\r\n                    loading: false\r\n                });\r\n\r\n            });\r\n    }, [category]);\r\n\r\n    return state;\r\n};\r\n","import React, {useState} from 'react';\r\nimport AddCategory from \"./components/AddCategory\";\r\nimport GifGrid from \"./components/GifGrid\";\r\n\r\nconst GifExpertApp = (props) => {\r\n    //const categories = [\"One Punch Man\", \"Samurai X\", \"Dragon Ball\"];\r\n    const [categories, setCategories] = useState([\"One Punch Man\"]);\r\n\r\n    // const handleAdd = () => {\r\n    //     // pueden agregarse así\r\n    //     setCategories([...categories, 'test']);\r\n    //\r\n    //     // o así (Este es muy útil cuando no se quiere enviar el estado\r\n    //     // al otro componente\r\n    //     //setCategories( cats => [...categories, 'tested']);\r\n    // };\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories={setCategories}/>\r\n            <hr/>\r\n            <ol>\r\n                {\r\n                    // siempre debe colocarse un id al elemento\r\n                    // en una iteración, para que react sepa\r\n                    // como identificar el elemento de manera única\r\n                    categories.map(category => (\r\n                        <GifGrid\r\n                            key={category}\r\n                            category={category}/>\r\n                    ))\r\n                }\r\n            </ol>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default GifExpertApp;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport GifExpertApp from \"./GifExpertApp\";\r\n\r\nReactDOM.render(\r\n    <GifExpertApp/>,\r\n    document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}